// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.10 (swiftlang-5.10.0.13 clang-1500.3.9.4)
// swift-module-flags: -target arm64-apple-ios13.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name FeitianReaderFramework
import CardConnectionWrapper
import CoreBluetooth
import ExternalAccessory
import FeitianLibrary
@_exported import FeitianReaderFramework
import Foundation
import ReaderConnectionWrapper
import Swift
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
@objc public class FeitianConnectionService : ReaderConnectionWrapper.SpecificReaderConnectionServiceBase, ReaderConnectionWrapper.SpecificReaderConnectionServiceProtocol {
  public typealias ReaderImplementation = FeitianReaderFramework.FeitianReader
  weak public var delegate: (any ReaderConnectionWrapper.ReaderConnectionServiceDelegate)?
  public var knownReaders: [any ReaderConnectionWrapper.SmartCardReaderProtocol] {
    get
    set
  }
  public var state: ReaderConnectionWrapper.ReaderConnectionServiceState {
    get
    set
  }
  public init()
  public func connect(reader: FeitianReaderFramework.FeitianReader)
  public func disconnect(reader: FeitianReaderFramework.FeitianReader)
  public func pair(reader: FeitianReaderFramework.FeitianReader)
  public func unpair(reader: FeitianReaderFramework.FeitianReader, onCompletion: (() -> Swift.Void)?)
  public func scanReadersForPairing(untilStopped: Swift.Bool = false)
  public func scanReadersForConnecting(untilStopped: Swift.Bool = false)
  public func stopScanning()
  override public func onCentralManagerPoweredOn()
  override public func onCentralManagerPoweredOff()
  @objc deinit
}
extension FeitianReaderFramework.FeitianConnectionService {
  @objc dynamic public func centralManager(_ central: CoreBluetooth.CBCentralManager, didDiscover peripheral: CoreBluetooth.CBPeripheral, advertisementData: [Swift.String : Any], rssi RSSI: Foundation.NSNumber)
}
@_hasMissingDesignatedInitializers public class FeitianReader : ReaderConnectionWrapper.SmartCardReaderProtocol, Swift.Codable {
  public var name: Swift.String
  public var lastSeen: Foundation.Date
  public var batteryStatus: ReaderConnectionWrapper.SmartCardReaderBatteryStatus?
  public var state: ReaderConnectionWrapper.ReaderConnectionState
  public var manufacturer: Swift.String {
    get
  }
  public var model: Swift.String {
    get
  }
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
extension FeitianReaderFramework.FeitianReader : Swift.Hashable {
  public static func == (lhs: FeitianReaderFramework.FeitianReader, rhs: FeitianReaderFramework.FeitianReader) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
