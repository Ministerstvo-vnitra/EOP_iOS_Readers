// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.9.2 (swiftlang-5.9.2.2.56 clang-1500.1.0.2.5)
// swift-module-flags: -target arm64-apple-ios13.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name ACSReaderFramework
// swift-module-flags-ignorable: -enable-bare-slash-regex
import ACSLibrary
@_exported import ACSReaderFramework
import CardConnectionWrapper
import CoreBluetooth
import Foundation
import ReaderConnectionWrapper
import Swift
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
@_hasMissingDesignatedInitializers public class ACSReader : ReaderConnectionWrapper.SmartCardReaderProtocol, Swift.Codable {
  public var name: Swift.String
  public var state: ReaderConnectionWrapper.ReaderConnectionState
  public var lastSeen: Foundation.Date
  public var batteryStatus: ReaderConnectionWrapper.SmartCardReaderBatteryStatus?
  final public let manufacturer: Swift.String
  final public let model: Swift.String
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@objc public class ACSConnectionService : ReaderConnectionWrapper.SpecificReaderConnectionServiceBase, ReaderConnectionWrapper.SpecificReaderConnectionServiceProtocol {
  public typealias ReaderImplementation = ACSReaderFramework.ACSReader
  weak public var delegate: (any ReaderConnectionWrapper.ReaderConnectionServiceDelegate)?
  public var knownReaders: [any ReaderConnectionWrapper.SmartCardReaderProtocol] {
    get
    set
  }
  public var state: ReaderConnectionWrapper.ReaderConnectionServiceState {
    get
    set
  }
  public init()
  @objc deinit
  public func connect(reader: ACSReaderFramework.ACSReader)
  public func disconnect(reader: ACSReaderFramework.ACSReader)
  public func pair(reader: ACSReaderFramework.ACSReader)
  public func unpair(reader: ACSReaderFramework.ACSReader, onCompletion: (() -> Swift.Void)?)
  public func scanReadersForPairing(untilStopped: Swift.Bool = true)
  public func scanReadersForConnecting(untilStopped: Swift.Bool = true)
  public func stopScanning()
  override public func onCentralManagerPoweredOn()
  override public func onCentralManagerPoweredOff()
}
extension ACSReaderFramework.ACSConnectionService {
  @objc dynamic public func centralManager(_ central: CoreBluetooth.CBCentralManager, didDiscover peripheral: CoreBluetooth.CBPeripheral, advertisementData: [Swift.String : Any], rssi RSSI: Foundation.NSNumber)
  @objc dynamic public func centralManager(_ central: CoreBluetooth.CBCentralManager, didConnect peripheral: CoreBluetooth.CBPeripheral)
  @objc dynamic public func centralManager(_ central: CoreBluetooth.CBCentralManager, didDisconnectPeripheral peripheral: CoreBluetooth.CBPeripheral, error: (any Swift.Error)?)
}
extension ACSReaderFramework.ACSConnectionService : ACSLibrary.ABTBluetoothReaderManagerDelegate {
  @objc dynamic public func bluetoothReaderManager(_ bluetoothReaderManager: ACSLibrary.ABTBluetoothReaderManager!, didDetect reader: ACSLibrary.ABTBluetoothReader!, peripheral: CoreBluetooth.CBPeripheral!, error: (any Swift.Error)!)
}
